/*
 * File: app/view/visita/VisitaViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AritmiaRef.view.visita.VisitaViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.visita.visita',

    onPazienteComboboSelect: function(combo, record, eOpts) {
        const me=this;
        const viewModel=me.getViewModel();
        const visitaRecord=viewModel.get('visitaRecord');
        visitaRecord.set('eta',record.get('eta'));
        visitaRecord.set('paziente',record.get('fullName'));
    },

    onOperatoreComboboxSelect: function(combo, record, eOpts) {
        const me=this;
        const viewModel=me.getViewModel();
        const visitaRecord=viewModel.get('visitaRecord');
        visitaRecord.set('operatoreSanitario',record.get('fullName'));
    },

    onProvenienzaComboboxSelect: function(combo, record, eOpts) {
        const me=this;
        const viewModel=me.getViewModel();
        const visitaRecord=viewModel.get('visitaRecord');
        visitaRecord.set('provenienza',record.get('descrizione'));
    },

    onEsciButtonClick: function(button, e, eOpts) {
        location.hash='home';
    },

    onSalvaEdEsciButtonClick: function(button, e, eOpts) {
        const me=this;
        const viewModel=me.getViewModel();
        const record=viewModel.get('visitaRecord');
        const grid=viewModel.get('visitaGrid');
        const store=grid.getStore();
        record.save({
            callback: store.reload({
                callback:function(){
                    location.hash='visite';
                }
            })
        });

    },

    onAddOperatoreButtonClick: function(button, e, eOpts) {

        const me=this;
        const win = new AritmiaRef.view.operatore.OperatoreWindow();
        const viewModel=win.down('form').getViewModel();
        viewModel.set('recordOperatore', new AritmiaRef.model.OperatoreJoined());
        viewModel.set('storeOperatoriJoined',me.lookupReference('operatoriGrid').getStore());
        viewModel.set('action','ADD');
        win.show();
    },

    onRemoveOperatoriButtonClick: function(button, e, eOpts) {
        const me=this;
        const grid=me.lookupReference('operatoriGrid');
        const store=grid.getStore();
        const selectedRows=grid.getSelectionModel().getSelection();
        if(selectedRows.length){
            store.remove(selectedRows);
        }
        store.sync({
            callback: function(){
                store.reload();
            }
        });


    },

    onAddPrestazioneButtonClick: function(button, e, eOpts) {
        const me=this;
        const win = new AritmiaRef.view.prestazione.PrestazioneWindow();
        const viewModel=win.down('form').getViewModel();
        viewModel.set('recordPrestazione', new AritmiaRef.model.PrestazioneJoined());
        viewModel.set('storePrestazioniJoined',me.lookupReference('prestazioniGrid').getStore());
        viewModel.set('action','ADD');
        win.show();
    },

    onRemovePrestazioniButtonClick: function(button, e, eOpts) {
        const me=this;
        const grid=me.lookupReference('prestazioniGrid');
        const store=grid.getStore();
        const selectedRows=grid.getSelectionModel().getSelection();
        if(selectedRows.length){
            store.remove(selectedRows);
        }
        store.sync({
            callback: function(){
                store.reload();
            }
        });

    }

});
