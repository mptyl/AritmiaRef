/*
 * File: app/view/visita/Visite.js
 *
 * This file was generated by Sencha Architect version 4.3.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AritmiaRef.view.visita.Visite', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.visita.visite',

    requires: [
        'AritmiaRef.view.visita.VisiteViewModel',
        'AritmiaRef.view.visita.VisiteViewController',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.RowNumberer',
        'Ext.grid.column.Date',
        'Ext.grid.filters.filter.Date',
        'Ext.grid.filters.filter.String',
        'Ext.grid.column.Number',
        'Ext.grid.filters.filter.Number',
        'Ext.grid.filters.filter.List',
        'Ext.grid.column.Action',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Fill',
        'Ext.grid.filters.Filters',
        'Ext.selection.CheckboxModel'
    ],

    controller: 'visita.visite',
    viewModel: {
        type: 'visita.visite'
    },
    itemId: 'visitePanel',

    items: [
        {
            xtype: 'gridpanel',
            reference: 'visiteGrid',
            title: 'Visite',
            titleAlign: 'center',
            autoLoad: true,
            store: 'Visite',
            columns: [
                {
                    xtype: 'rownumberer'
                },
                {
                    xtype: 'datecolumn',
                    flex: 2,
                    dataIndex: 'dataVisita',
                    text: 'Data',
                    format: 'd/m/Y',
                    filter: {
                        type: 'date'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    flex: 10,
                    dataIndex: 'paziente',
                    text: 'Paziente',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    flex: 2,
                    align: 'center',
                    dataIndex: 'eta',
                    text: 'Et√†',
                    format: '000',
                    filter: {
                        type: 'number'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    flex: 10,
                    dataIndex: 'operatoreSanitario',
                    text: 'Medico',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    flex: 3,
                    dataIndex: 'provenienza',
                    text: 'Provenienza',
                    filter: {
                        type: 'list'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    flex: 5,
                    dataIndex: 'terapiaInCorso',
                    text: 'Terapia in atto',
                    filter: {
                        type: 'list'
                    }
                },
                {
                    xtype: 'actioncolumn',
                    width: 40,
                    align: 'center',
                    items: [
                        {
                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                const me=this;
                                const visitaForm= Ext.ComponentQuery.query('#visitaPanel')[0];
                                const viewModel=visitaForm.getViewModel();
                                const grid=me.up('grid');
                                viewModel.set('visitaRecord',record);
                                viewModel.set('visitaGrid',grid);

                                visitaForm.fireEvent('resetActiveTabs');
                                this.fireEvent('redirectToVisita');

                            },
                            iconCls: 'x-fa fa-pen'
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    ui: 'footer',
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'x-fa fa-plus',
                            text: 'Crea nuova visita',
                            listeners: {
                                click: 'onAddVisitaButtonClick'
                            }
                        },
                        {
                            xtype: 'tbfill'
                        },
                        {
                            xtype: 'button',
                            text: 'Elimina tutti i filtri',
                            listeners: {
                                click: 'onEliminaFiltriButtonClick'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'fa-light fa-file-excel',
                            text: 'Scarica in Excel'
                        },
                        {
                            xtype: 'button',
                            text: 'Elimina visite selezionate',
                            listeners: {
                                click: 'onRemoveButtonClick'
                            }
                        }
                    ]
                }
            ],
            plugins: [
                {
                    ptype: 'gridfilters'
                }
            ],
            listeners: {
                viewready: 'onGridpanelViewReady',
                rowdblclick: 'onGridpanelRowDblClick'
            },
            selModel: {
                selType: 'checkboxmodel'
            }
        }
    ]

});