/*
 * File: app/view/operatore/OperatoreForm.js
 *
 * This file was generated by Sencha Architect version 4.3.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('AritmiaRef.view.operatore.OperatoreForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.operatore.operatoreform',

    requires: [
        'AritmiaRef.view.operatore.OperatoreFormViewModel',
        'AritmiaRef.view.operatore.OperatoreFormViewController',
        'Ext.form.field.ComboBox',
        'Ext.view.BoundList',
        'Ext.XTemplate',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Fill'
    ],

    controller: 'operatore.operatoreform',
    viewModel: {
        type: 'operatore.operatoreform'
    },
    reference: 'operatorForm',
    layout: 'form',
    bodyPadding: 10,
    fieldDefaults: {
        labelWidth: 120,
        labelAlign: 'right',
        selectOnFocus: true
    },

    items: [
        {
            xtype: 'combobox',
            fieldLabel: 'Ruolo:',
            name: 'roleFk',
            autoLoadOnValue: true,
            displayField: 'code',
            forceSelection: true,
            queryMode: 'local',
            store: 'Roles',
            valueField: 'id',
            bind: {
                value: '{recordOperatore.roleFk}'
            },
            listeners: {
                select: 'onRoleComboboxSelect'
            }
        },
        {
            xtype: 'combobox',
            fieldLabel: 'Cognome:',
            name: 'operatoreFk',
            allowBlank: false,
            autoLoadOnValue: true,
            displayField: 'lastName',
            forceSelection: true,
            queryMode: 'local',
            store: 'Operatori',
            typeAhead: true,
            valueField: 'id',
            bind: {
                value: '{recordOperatore.operatoreFk}'
            },
            listConfig: {
                xtype: 'boundlist',
                itemSelector: 'div',
                itemTpl: [
                    '{lastName} {firstName} - ID:{idNumber}'
                ]
            },
            listeners: {
                select: 'onOperatoreComboboxSelect'
            }
        },
        {
            xtype: 'textfield',
            formBind: false,
            fieldLabel: 'Nome:',
            name: 'firstName',
            readOnly: true,
            bind: {
                value: '{recordOperatore.firstName}'
            }
        },
        {
            xtype: 'textfield',
            fieldLabel: 'Telefono:',
            name: 'phone',
            readOnly: true,
            bind: {
                value: '{recordOperatore.phone}'
            }
        },
        {
            xtype: 'textfield',
            fieldLabel: 'Email:',
            name: 'email',
            readOnly: true,
            bind: {
                value: '{recordOperatore.email}'
            }
        },
        {
            xtype: 'textfield',
            fieldLabel: 'Numero identificativo:',
            name: 'idNumber',
            readOnly: true,
            bind: {
                value: '{recordOperatore.idNumber}'
            }
        }
    ],
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            layout: {
                type: 'hbox',
                padding: '0 0 0 10'
            },
            items: [
                {
                    xtype: 'button',
                    handler: function(button, e) {
                        this.up('window').close();
                    },
                    text: 'Cancel'
                },
                {
                    xtype: 'tbfill'
                },
                {
                    xtype: 'button',
                    handler: function(button, e) {
                        const form=button.up('form');
                        const viewModel=button.up('form').getViewModel();
                        const store=viewModel.get('storeOperatoriJoined');
                        const record=viewModel.get('recordOperatore');
                        const action=viewModel.get('action');
                        if(action==='ADD'){
                            store.add(record);
                        }
                        store.sync();
                        store.reload();
                        button.up('window').close();
                    },
                    text: 'Save'
                }
            ]
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processOperatoreOperatoreForm(config);
        if (instanceConfig) {
            me.self.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processOperatoreOperatoreForm: function(config) {

    }

});